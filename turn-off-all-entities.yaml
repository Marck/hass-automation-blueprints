blueprint: 
  name: Turn off entities at a specific time or by using a trigger entity
  description: Turn off every entity at specific time or by using a trigger entity
  domain: automation
  input:
    time:
      name: Time to run at
      description: The automation is run at this configured time
      default: '23:00:00'
      selector:
        time: {}
    trigger_entity:
      name: Trigger entity
      description: Entity to trigger the blueprint. For example a input_button.
      default: ''
      selector:
        entity:
    # blocker_entity:
    #   name: (Optional) Blocking Entity
    #   description: If this entity's state is set to blocking entity state (defined
    #     below), it will prevent the automation from "turning on" the target entity using
    #     the action defined above.
    #   default:
    #   selector:
    #     entity:
    # blocker_entity_state:
    #   name: (Optional) Blocking Entity State
    #   description: If blocking entity's state is of this state, it will prevent the
    #     automation from  "turning on" the target entity using action defined above.
    #   default:
    #   selector:
    #     entity:
    #       domain: input_text
    climate_blocker_trigger:
      name: Climate blocker trigger
      description: Determine if climate is turned off by either time or trigger entity
      default:
      selector:
        select:
          options:
            - Time
            - Trigger entity
    actions:
      name: Actions
      description: Notifications or similar to be run after running the turn off statements
      selector:
        action: {}
  source_url: https://github.com/Marck/home-assistant-automation-blueprints/blob/main/turn-off-everything-at-time.yaml
mode: restart
max_exceeded: silent
variables:
  # blocker_entity: !input 'blocker_entity'
  # _blocker_entity_state: !input 'blocker_entity_state'
  # blocker_entity_state: '{{ (_blocker_entity_state or '''') | trim }}'
  climate_blocker_trigger: !input climate_blocker_trigger
  state: 'on'
  areas: >
    {% set areas = states
      | selectattr('attributes.device_class', 'defined') 
      | map(attribute='entity_id')
      | map('area_id') | unique | reject('none') | list %}
    {{ areas | list }}
  lights: >
    {% set ns = namespace(entities=[]) %}
    {% for area in areas %}
      {% set ns.entities = ns.entities + expand(area_entities(area) | select('match', 'light'))
        | selectattr('state', 'eq', state) | map(attribute='entity_id') | list %}
    {% endfor %}
    {{ ns.entities }}   
  switches: >
    {% set ns = namespace(entities=[]) %}
    {% for area in areas %}
      {% set ns.entities = ns.entities + expand(area_entities(area) | select('match', 'switch'))
        | selectattr('state', 'eq', state) | map(attribute='entity_id') | list %}
    {% endfor %}
    {{ ns.entities }}
  media_players: >
    {% set ns = namespace(entities=[]) %}
    {% for area in areas %}
      {% set ns.entities = ns.entities + expand(area_entities(area) | select('match', 'media_player'))
        | selectattr('state', 'eq', state) | map(attribute='entity_id') | list %}
    {% endfor %}
    {{ ns.entities }}
  climate: >
    {% set ns = namespace(entities=[]) %}
    {% for area in areas %}
      {% set ns.entities = ns.entities + expand(area_entities(area) | select('match', 'climate'))
        | selectattr('state', 'ne', 'off') | map(attribute='entity_id') | list %}
    {% endfor %}
    {{ ns.entities }}
trigger:
  - platform: time
    at: !input 'time'
    id: "1"
  - platform: state
    entity_id: !input 'trigger_entity'
    id: "2"
# condition: 
#   - condition: template
#     value_template: '{{ not blocker_entity or not states(blocker_entity) | regex_match(''^(''+
#       blocker_entity_state +'')$'', ignorecase=true) }}'
action:
  - choose: []
    default: !input 'actions'
  - if:
      - condition: template
        value_template: "{{ lights | length > 0 }}"
    then:
      - service: light.turn_off
        data: {}
        target:
          entity_id: '{{ lights }}'
  - if:
      - condition: template
        value_template: "{{ switches | length > 0 }}"
    then:
      - service: switch.turn_off
        data: {}
        target:
          entity_id: '{{ switches }}'
  - if:
      - condition: template
        value_template: "{{ media_players | length > 0 }}"
    then:
      - service: media_player.turn_off
        data: {}
        target:
          entity_id: '{{ media_players }}'
  - if:
      - condition: template
        value_template: "{{ climate | length > 0 }}"
      - condition: template
        value_template: "{{ climate_blocker_trigger == 'Time' }}"
      - condition: trigger
        id: "1"
    then:
      - service: climate.turn_off
        data: {}
        target:
          entity_id: '{{ climate }}'
  - if:
      - condition: template
        value_template: "{{ climate | length > 0 }}"
      - condition: template
        value_template: "{{ climate_blocker_trigger == 'Trigger entity' }}"
      - condition: trigger
        id: "2"
    then:
      - service: climate.turn_off
        data: {}
        target:
          entity_id: '{{ climate }}'
  